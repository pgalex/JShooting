package com.jshooting.forms;

import com.jshooting.shootingDatabase.ShootingDatabase;
import com.jshooting.shootingDatabase.ShootingDatabaseFactory;
import java.awt.Dialog;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 * Main frame
 *
 * @author pgalex
 */
public class MainFrame extends javax.swing.JFrame
{
	/**
	 * Name of user settings file
	 */
	private static final String USER_SETTINGS_FILE_NAME = "userSettings.dat";
	/**
	 * Connection to database. If null there is no database choosed
	 */
	private ShootingDatabase shootingDatabase;

	/**
	 * Creates new form MainFrame
	 */
	public MainFrame()
	{
		initComponents();
		setTitle("JShooting");

		shootingDatabase = null;

		readUserSettings();
		File previousDatabaseFile = new File(UserSettings.getInstance().getDatabaseFileName());
		if (previousDatabaseFile.exists())
		{
			connectToPreviousDatabase();
		}
		else
		{
			shootingDatabase = null;
		}

		updateWorkingControlsEnable();
		updateDatabaseFileNameControls();
	}

	/**
	 * Connect to database, by file name saved in user settings
	 */
	private void connectToPreviousDatabase()
	{
		try
		{
			shootingDatabase = ShootingDatabaseFactory.openDatabaseFromFile(UserSettings.getInstance().getDatabaseFileName());
		}
		catch (Exception ex)
		{
			JOptionPane.showMessageDialog(null, "Невозможно подключится к базе данных: " + ex.getLocalizedMessage(), "Ошибка", JOptionPane.ERROR_MESSAGE);
			shootingDatabase = null;
		}
	}

	/**
	 * Read user settings from file
	 */
	private void readUserSettings()
	{
		try
		{
			UserSettings.getInstance().readFromFile(new File(USER_SETTINGS_FILE_NAME));
		}
		catch (IOException ex)
		{
			UserSettings.setAsDefault();
		}
	}

	/**
	 * Set working controls enable by shooting database state(choosed or no)
	 */
	private void updateWorkingControlsEnable()
	{
		jPanelWorkingControls.setVisible(shootingDatabase != null);
	}

	/**
	 * Set database file name to controls
	 */
	private void updateDatabaseFileNameControls()
	{
		if (shootingDatabase != null)
		{
			jTextFieldDatabaseFileName.setText(shootingDatabase.getFileName());
		}
		else
		{
			jTextFieldDatabaseFileName.setText("");
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    jPanelChooseDatabaseControls = new javax.swing.JPanel();
    jLabelDatabaseFileName = new javax.swing.JLabel();
    jTextFieldDatabaseFileName = new javax.swing.JTextField();
    jButtonOpenDatabase = new javax.swing.JButton();
    jButtonCreateDatabase = new javax.swing.JButton();
    jPanelWorkingControls = new javax.swing.JPanel();
    jButtonSportsmans = new javax.swing.JButton();
    jButtonPlaces = new javax.swing.JButton();
    jButtonAddTraining = new javax.swing.JButton();
    jButtonReports = new javax.swing.JButton();
    jButton1 = new javax.swing.JButton();
    jButtonTeams = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setResizable(false);
    addWindowListener(new java.awt.event.WindowAdapter()
    {
      public void windowClosing(java.awt.event.WindowEvent evt)
      {
        formWindowClosing(evt);
      }
    });

    jLabelDatabaseFileName.setText("База данных:");

    jTextFieldDatabaseFileName.setEditable(false);

    jButtonOpenDatabase.setText("Открыть ...");
    jButtonOpenDatabase.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonOpenDatabaseActionPerformed(evt);
      }
    });

    jButtonCreateDatabase.setText("Создать ...");
    jButtonCreateDatabase.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonCreateDatabaseActionPerformed(evt);
      }
    });

    org.jdesktop.layout.GroupLayout jPanelChooseDatabaseControlsLayout = new org.jdesktop.layout.GroupLayout(jPanelChooseDatabaseControls);
    jPanelChooseDatabaseControls.setLayout(jPanelChooseDatabaseControlsLayout);
    jPanelChooseDatabaseControlsLayout.setHorizontalGroup(
      jPanelChooseDatabaseControlsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(jPanelChooseDatabaseControlsLayout.createSequentialGroup()
        .addContainerGap()
        .add(jPanelChooseDatabaseControlsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(jPanelChooseDatabaseControlsLayout.createSequentialGroup()
            .add(jLabelDatabaseFileName)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jTextFieldDatabaseFileName))
          .add(jPanelChooseDatabaseControlsLayout.createSequentialGroup()
            .add(jButtonOpenDatabase)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jButtonCreateDatabase)
            .add(0, 0, Short.MAX_VALUE)))
        .addContainerGap())
    );
    jPanelChooseDatabaseControlsLayout.setVerticalGroup(
      jPanelChooseDatabaseControlsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(jPanelChooseDatabaseControlsLayout.createSequentialGroup()
        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .add(jPanelChooseDatabaseControlsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(jLabelDatabaseFileName)
          .add(jTextFieldDatabaseFileName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(jPanelChooseDatabaseControlsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(jButtonOpenDatabase)
          .add(jButtonCreateDatabase)))
    );

    jButtonSportsmans.setText("Спортсмены ...");
    jButtonSportsmans.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonSportsmansActionPerformed(evt);
      }
    });

    jButtonPlaces.setText("УТС ...");

    jButtonAddTraining.setText("Добавить тренировку ...");
    jButtonAddTraining.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonAddTrainingActionPerformed(evt);
      }
    });

    jButtonReports.setText("Отчеты ...");

    jButton1.setText("Средства ...");
    jButton1.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButton1ActionPerformed(evt);
      }
    });

    jButtonTeams.setText("Команды ...");
    jButtonTeams.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonTeamsActionPerformed(evt);
      }
    });

    org.jdesktop.layout.GroupLayout jPanelWorkingControlsLayout = new org.jdesktop.layout.GroupLayout(jPanelWorkingControls);
    jPanelWorkingControls.setLayout(jPanelWorkingControlsLayout);
    jPanelWorkingControlsLayout.setHorizontalGroup(
      jPanelWorkingControlsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(jPanelWorkingControlsLayout.createSequentialGroup()
        .addContainerGap()
        .add(jPanelWorkingControlsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(jPanelWorkingControlsLayout.createSequentialGroup()
            .add(jPanelWorkingControlsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
              .add(jButtonAddTraining)
              .add(jButtonReports))
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
          .add(jPanelWorkingControlsLayout.createSequentialGroup()
            .add(jButtonTeams)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jButtonSportsmans)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jButtonPlaces)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jButton1)
            .add(60, 60, 60))))
    );
    jPanelWorkingControlsLayout.setVerticalGroup(
      jPanelWorkingControlsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(jPanelWorkingControlsLayout.createSequentialGroup()
        .addContainerGap()
        .add(jPanelWorkingControlsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(jButtonSportsmans)
          .add(jButtonPlaces)
          .add(jButton1)
          .add(jButtonTeams))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(jButtonAddTraining)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(jButtonReports)
        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelWorkingControls, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .add(jPanelChooseDatabaseControls, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
        .add(jPanelChooseDatabaseControls, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        .add(18, 18, 18)
        .add(jPanelWorkingControls, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
  {//GEN-HEADEREND:event_formWindowClosing
		try
		{
			if (shootingDatabase != null)
			{
				UserSettings.getInstance().setDatabaseFileName(shootingDatabase.getFileName());
			}
			else
			{
				UserSettings.getInstance().setDatabaseFileName("");
			}
			UserSettings.getInstance().writeToFile(new File(USER_SETTINGS_FILE_NAME));
		}
		catch (IOException ex)
		{
			Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
		}
  }//GEN-LAST:event_formWindowClosing

  private void jButtonCreateDatabaseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonCreateDatabaseActionPerformed
  {//GEN-HEADEREND:event_jButtonCreateDatabaseActionPerformed
		JFileChooser fileChooser = new JFileChooser();
		fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

		int showDialogResult = fileChooser.showSaveDialog(this);
		if (showDialogResult == JFileChooser.APPROVE_OPTION)
		{
			try
			{
				if (fileChooser.getSelectedFile().exists())
				{
					fileChooser.getSelectedFile().delete();
				}
				shootingDatabase = ShootingDatabaseFactory.openDatabaseFromFile(fileChooser.getSelectedFile().getPath());
			}
			catch (Exception ex)
			{
				JOptionPane.showMessageDialog(null, "Невозможно создать базу данных: " + ex.getLocalizedMessage(), "Ошибка", JOptionPane.ERROR_MESSAGE);
				shootingDatabase = null;
			}

			updateDatabaseFileNameControls();
			updateWorkingControlsEnable();
		}
  }//GEN-LAST:event_jButtonCreateDatabaseActionPerformed

  private void jButtonOpenDatabaseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonOpenDatabaseActionPerformed
  {//GEN-HEADEREND:event_jButtonOpenDatabaseActionPerformed
		JFileChooser fileChooser = new JFileChooser();
		fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

		int showDialogResult = fileChooser.showOpenDialog(this);
		if (showDialogResult == JFileChooser.APPROVE_OPTION)
		{
			try
			{
				shootingDatabase = ShootingDatabaseFactory.openDatabaseFromFile(fileChooser.getSelectedFile().getPath());
			}
			catch (Exception ex)
			{
				JOptionPane.showMessageDialog(null, "Невозможно открыть базу данных: " + ex.getLocalizedMessage(), "Ошибка", JOptionPane.ERROR_MESSAGE);
				shootingDatabase = null;
			}

			updateDatabaseFileNameControls();
			updateWorkingControlsEnable();
		}
  }//GEN-LAST:event_jButtonOpenDatabaseActionPerformed

  private void jButtonSportsmansActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSportsmansActionPerformed
  {//GEN-HEADEREND:event_jButtonSportsmansActionPerformed
		EditSportsmansDialog editSportsmansDialog = new EditSportsmansDialog(this, Dialog.ModalityType.APPLICATION_MODAL,
						shootingDatabase.getTeamsTable(), shootingDatabase.getSportsmansTable());
		editSportsmansDialog.setLocationRelativeTo(this);
		editSportsmansDialog.setVisible(true);
  }//GEN-LAST:event_jButtonSportsmansActionPerformed

  private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
  {//GEN-HEADEREND:event_jButton1ActionPerformed
		EditTrainingMethodsDialog editTrainingMethodsDialog = new EditTrainingMethodsDialog(this, Dialog.ModalityType.APPLICATION_MODAL,
						shootingDatabase.getTrainingMethodsTable());
		editTrainingMethodsDialog.setLocationRelativeTo(this);
		editTrainingMethodsDialog.setVisible(true);
  }//GEN-LAST:event_jButton1ActionPerformed

  private void jButtonAddTrainingActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonAddTrainingActionPerformed
  {//GEN-HEADEREND:event_jButtonAddTrainingActionPerformed
		AddShootingTrainingDialog addShootingTrainingDialog = new AddShootingTrainingDialog(this, Dialog.ModalityType.APPLICATION_MODAL,
						shootingDatabase.getTeamsTable(), shootingDatabase.getSportsmansTable(),
						shootingDatabase.getTrainingMethodsTable());
		addShootingTrainingDialog.setLocationRelativeTo(this);
		addShootingTrainingDialog.setVisible(true);
  }//GEN-LAST:event_jButtonAddTrainingActionPerformed

  private void jButtonTeamsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonTeamsActionPerformed
  {//GEN-HEADEREND:event_jButtonTeamsActionPerformed
		EditTeamsDialog editTeamsDialog = new EditTeamsDialog(this, Dialog.ModalityType.APPLICATION_MODAL,
						shootingDatabase.getTeamsTable());
		editTeamsDialog.setLocationRelativeTo(this);
		editTeamsDialog.setVisible(true);
  }//GEN-LAST:event_jButtonTeamsActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[])
	{
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try
		{
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
			{
				if ("Nimbus".equals(info.getName()))
				{
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		}
		catch (ClassNotFoundException ex)
		{
			java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		catch (InstantiationException ex)
		{
			java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		catch (IllegalAccessException ex)
		{
			java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		catch (javax.swing.UnsupportedLookAndFeelException ex)
		{
			java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable()
		{
			@Override
			public void run()
			{
				MainFrame mainFrame = new MainFrame();
				mainFrame.setLocationRelativeTo(null);
				mainFrame.setVisible(true);
			}
		});
	}
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton jButton1;
  private javax.swing.JButton jButtonAddTraining;
  private javax.swing.JButton jButtonCreateDatabase;
  private javax.swing.JButton jButtonOpenDatabase;
  private javax.swing.JButton jButtonPlaces;
  private javax.swing.JButton jButtonReports;
  private javax.swing.JButton jButtonSportsmans;
  private javax.swing.JButton jButtonTeams;
  private javax.swing.JLabel jLabelDatabaseFileName;
  private javax.swing.JPanel jPanelChooseDatabaseControls;
  private javax.swing.JPanel jPanelWorkingControls;
  private javax.swing.JTextField jTextFieldDatabaseFileName;
  // End of variables declaration//GEN-END:variables
}
