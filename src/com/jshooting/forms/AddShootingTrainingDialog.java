package com.jshooting.forms;

import com.jshooting.shootingDatabase.Sportsman;
import com.jshooting.shootingDatabase.SportsmansTable;
import com.jshooting.shootingDatabase.Team;
import com.jshooting.shootingDatabase.TeamsTable;
import com.jshooting.shootingDatabase.TrainingMethod;
import com.jshooting.shootingDatabase.TrainingMethodsTable;
import com.jshooting.shootingDatabase.exceptions.DatabaseErrorException;
import java.awt.Window;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;

/**
 * Dialog for adding shooting training
 *
 * @author pgalex
 */
public class AddShootingTrainingDialog extends javax.swing.JDialog
{
	/**
	 * Model for teams combo box
	 */
	private DefaultComboBoxModel teamsComboBoxModel;
	/**
	 * Model for sportsmans combo box
	 */
	private DefaultComboBoxModel sportsmansComboBoxModel;
	/**
	 * Model for training methods combo box
	 */
	private DefaultComboBoxModel trainingMethodsComboBoxModel;
	/**
	 * Table of sportsmans. Using to refill sportsmans combo by selected team
	 */
	private SportsmansTable sportsmansTable;
	/**
	 * Table of teams
	 */
	private TeamsTable teamsTable;
	/**
	 * Table of training methods
	 */
	private TrainingMethodsTable trainingMethodsTable;

	/**
	 * Create new dialog
	 *
	 * @param parentWindow parent window
	 * @param modalityType modality type of dialog
	 * @param teamsTable table of teams
	 * @param sportsmansTable table of sportsmans
	 * @param trainingMethodsTable table of training methods
	 * @throws IllegalArgumentException teamsTable, sportsmansTable or
	 * trainingMethodsTable is null
	 */
	public AddShootingTrainingDialog(Window parentWindow, ModalityType modalityType,
					TeamsTable teamsTable, SportsmansTable sportsmansTable,
					TrainingMethodsTable trainingMethodsTable) throws IllegalArgumentException
	{
		super(parentWindow, modalityType);

		if (teamsTable == null)
		{
			throw new IllegalArgumentException("teamsTable is null");
		}
		if (sportsmansTable == null)
		{
			throw new IllegalArgumentException("sportsmansTable is null");
		}
		if (trainingMethodsTable == null)
		{
			throw new IllegalArgumentException("trainingMethodsTable is null");
		}

		this.teamsTable = teamsTable;
		this.sportsmansTable = sportsmansTable;
		this.trainingMethodsTable = trainingMethodsTable;

		teamsComboBoxModel = new DefaultComboBoxModel();
		sportsmansComboBoxModel = new DefaultComboBoxModel();
		trainingMethodsComboBoxModel = new DefaultComboBoxModel();

		initComponents();
		setTitle("Добавить тренировку");

		fillTeamsComboBox();
		fillSportmansComboBoxBySelectedTeam();
		fillTrainingMethodsComboBox();
	}

	/**
	 * Fill training methods combo box with training methods table. Model will be
	 * empty can not get access to table data
	 */
	private void fillTrainingMethodsComboBox()
	{
		try
		{
			trainingMethodsComboBoxModel.removeAllElements();
			List<TrainingMethod> allMethods = trainingMethodsTable.getAllTrainingMethods();
			for (TrainingMethod trainingMethod : allMethods)
			{
				trainingMethodsComboBoxModel.addElement(trainingMethod);
			}
		}
		catch (DatabaseErrorException ex)
		{
			trainingMethodsComboBoxModel.removeAllElements();
		}

	}

	/**
	 * Fill teams combo box model by teams table. Model will be empty if can no
	 * get access to table
	 *
	 * @param teamsTable table of teams
	 */
	private void fillTeamsComboBox()
	{
		try
		{
			teamsComboBoxModel.removeAllElements();
			List<Team> allTeams = teamsTable.getAllTeams();
			for (Team team : allTeams)
			{
				teamsComboBoxModel.addElement(team);
			}
		}
		catch (DatabaseErrorException ex)
		{
			teamsComboBoxModel.removeAllElements();
		}
	}

	/**
	 * Fill sportmans combo box model by sportmans in team, selected in teams
	 * combo box. Empty if team not selected or can not get access to sportmans
	 * table
	 */
	private void fillSportmansComboBoxBySelectedTeam()
	{
		try
		{
			sportsmansComboBoxModel.removeAllElements();
			Object selectedItem = jComboBoxTeam.getSelectedItem();
			if (selectedItem instanceof Team)
			{
				Team selectedTeam = (Team) selectedItem;
				List<Sportsman> sportsmansInSelectedTeam = sportsmansTable.getSportsmansInTeam(selectedTeam);
				for (Sportsman sportsman : sportsmansInSelectedTeam)
				{
					sportsmansComboBoxModel.addElement(sportsman);
				}
			}
		}
		catch (DatabaseErrorException ex)
		{
			sportsmansComboBoxModel.removeAllElements();
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    jLabel1 = new javax.swing.JLabel();
    jComboBoxSportsman = new javax.swing.JComboBox();
    jLabel2 = new javax.swing.JLabel();
    jComboBoxTeam = new javax.swing.JComboBox();
    jLabel3 = new javax.swing.JLabel();
    jTextField1 = new javax.swing.JTextField();
    jComboBoxTrainingMethod = new javax.swing.JComboBox();
    jLabel4 = new javax.swing.JLabel();
    jLabel5 = new javax.swing.JLabel();
    jTextFieldWeather = new javax.swing.JTextField();
    jTextFieldComments = new javax.swing.JTextField();
    jLabel6 = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

    jLabel1.setText("Спортсмен");

    jComboBoxSportsman.setModel(sportsmansComboBoxModel);

    jLabel2.setText("Команда");

    jComboBoxTeam.setModel(teamsComboBoxModel);
    jComboBoxTeam.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jComboBoxTeamActionPerformed(evt);
      }
    });

    jLabel3.setText("Дата");

    jTextField1.setText("jTextField1");

    jComboBoxTrainingMethod.setModel(trainingMethodsComboBoxModel);

    jLabel4.setText("Средство");

    jLabel5.setText("Погода");

    jTextFieldWeather.setText("jTextField2");

    jTextFieldComments.setText("jTextField3");

    jLabel6.setText("Комментарий");

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
        .add(jLabel6)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 52, Short.MAX_VALUE)
        .add(jTextFieldComments, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(jTextFieldWeather, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        .add(79, 79, 79))
      .add(layout.createSequentialGroup()
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
          .add(layout.createSequentialGroup()
            .add(27, 27, 27)
            .add(jLabel3))
          .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
              .add(layout.createSequentialGroup()
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jComboBoxTeam, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 211, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
              .add(layout.createSequentialGroup()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jComboBoxSportsman, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 197, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
              .add(layout.createSequentialGroup()
                .add(13, 13, 13)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                  .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                    .add(0, 0, Short.MAX_VALUE)
                    .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                  .add(jLabel5)))))
          .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(jLabel4)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(jComboBoxTrainingMethod, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(layout.createSequentialGroup()
        .addContainerGap()
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(jComboBoxTeam, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(jLabel2))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(jComboBoxSportsman, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(jLabel1))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(jComboBoxTrainingMethod, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(jLabel4))
        .add(24, 24, 24)
        .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(layout.createSequentialGroup()
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jLabel3)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(jLabel5)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
              .add(jLabel6)
              .add(jTextFieldComments, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(62, Short.MAX_VALUE))
          .add(layout.createSequentialGroup()
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jTextFieldWeather, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void jComboBoxTeamActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jComboBoxTeamActionPerformed
  {//GEN-HEADEREND:event_jComboBoxTeamActionPerformed
		fillSportmansComboBoxBySelectedTeam();
  }//GEN-LAST:event_jComboBoxTeamActionPerformed
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JComboBox jComboBoxSportsman;
  private javax.swing.JComboBox jComboBoxTeam;
  private javax.swing.JComboBox jComboBoxTrainingMethod;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JTextField jTextField1;
  private javax.swing.JTextField jTextFieldComments;
  private javax.swing.JTextField jTextFieldWeather;
  // End of variables declaration//GEN-END:variables
}
